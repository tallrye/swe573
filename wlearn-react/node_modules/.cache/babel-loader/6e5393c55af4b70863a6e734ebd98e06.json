{"ast":null,"code":"var _slicedToArray = require(\"/Users/tallrye/React/swe573/wlearn-react/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar toDateObject = require('./wikidata_time_to_date_object');\n\nvar helpers = {};\n\nhelpers.isNumericId = function (id) {\n  return /^[1-9][0-9]*$/.test(id);\n};\n\nhelpers.isEntityId = function (id) {\n  return /^(Q|P)[1-9][0-9]*$/.test(id);\n};\n\nhelpers.isItemId = function (id) {\n  return /^Q[1-9][0-9]*$/.test(id);\n};\n\nhelpers.isPropertyId = function (id) {\n  return /^P[1-9][0-9]*$/.test(id);\n};\n\nhelpers.isGuid = function (guid) {\n  return /^(Q|P|L)\\d+\\$[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(guid);\n};\n\nhelpers.getNumericId = function (id) {\n  if (!helpers.isEntityId(id)) throw new Error(\"invalid wikidata id: \".concat(id));\n  return id.replace(/Q|P/, '');\n};\n\nhelpers.wikidataTimeToDateObject = toDateObject; // Try to parse the date or return the input\n\nvar bestEffort = function bestEffort(fn) {\n  return function (value) {\n    try {\n      return fn(value);\n    } catch (err) {\n      value = value.time || value;\n      var sign = value[0];\n\n      var _value$slice$split = value.slice(1).split('T'),\n          _value$slice$split2 = _slicedToArray(_value$slice$split, 2),\n          yearMonthDay = _value$slice$split2[0],\n          withinDay = _value$slice$split2[1];\n\n      yearMonthDay = yearMonthDay.replace(/-00/g, '-01');\n      return \"\".concat(sign).concat(yearMonthDay, \"T\").concat(withinDay);\n    }\n  };\n};\n\nvar toEpochTime = function toEpochTime(wikidataTime) {\n  return toDateObject(wikidataTime).getTime();\n};\n\nvar toISOString = function toISOString(wikidataTime) {\n  return toDateObject(wikidataTime).toISOString();\n}; // A date format that knows just three precisions:\n// 'yyyy', 'yyyy-mm', and 'yyyy-mm-dd' (including negative and non-4 digit years)\n// Should be able to handle the old and the new Wikidata time:\n// - in the old one, units below the precision where set to 00\n// - in the new one, those months and days are set to 01 in those cases,\n//   so when we can access the full claim object, we check the precision\n//   to recover the old format\n\n\nvar toSimpleDay = function toSimpleDay(wikidataTime) {\n  // Also accept claim datavalue.value objects, and actually prefer those,\n  // as we can check the precision\n  if (typeof wikidataTime === 'object') {\n    var _wikidataTime = wikidataTime,\n        time = _wikidataTime.time,\n        precision = _wikidataTime.precision; // Year precision\n\n    if (precision === 9) wikidataTime = time.replace('-01-01T', '-00-00T'); // Month precision\n    else if (precision === 10) wikidataTime = time.replace('-01T', '-00T');else wikidataTime = time;\n  }\n\n  return wikidataTime.split('T')[0] // Remove positive years sign\n  .replace(/^\\+/, '') // Remove years padding zeros\n  .replace(/^(-?)0+/, '$1') // Remove days if not included in the Wikidata date precision\n  .replace(/-00$/, '') // Remove months if not included in the Wikidata date precision\n  .replace(/-00$/, '');\n};\n\nhelpers.wikidataTimeToEpochTime = bestEffort(toEpochTime);\nhelpers.wikidataTimeToISOString = bestEffort(toISOString);\nhelpers.wikidataTimeToSimpleDay = bestEffort(toSimpleDay);\n\nhelpers.getImageUrl = function (filename, width) {\n  var url = \"https://commons.wikimedia.org/wiki/Special:FilePath/\".concat(filename);\n  if (typeof width === 'number') url += \"?width=\".concat(width);\n  return url;\n};\n\nmodule.exports = helpers;","map":null,"metadata":{},"sourceType":"script"}