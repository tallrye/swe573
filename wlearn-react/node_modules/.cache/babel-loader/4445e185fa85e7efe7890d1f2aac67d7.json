{"ast":null,"code":"var buildUrl = require('../utils/build_url');\n\nvar _require = require('../utils/utils'),\n    isPlainObject = _require.isPlainObject,\n    forceArray = _require.forceArray,\n    shortLang = _require.shortLang;\n\nmodule.exports = function (ids, languages, props, format, redirects) {\n  // Polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(ids)) {\n    var _ids = ids;\n    ids = _ids.ids;\n    languages = _ids.languages;\n    props = _ids.props;\n    format = _ids.format;\n    redirects = _ids.redirects;\n  }\n\n  format = format || 'json'; // ids can't be let empty\n\n  if (!(ids && ids.length > 0)) throw new Error('no id provided'); // Allow to pass ids as a single string\n\n  ids = forceArray(ids);\n\n  if (ids.length > 50) {\n    console.warn(\"getEntities accepts 50 ids max to match Wikidata API limitations:\\n      this request won't get all the desired entities.\\n      You can use getManyEntities instead to generate several request urls\\n      to work around this limitation\");\n  } // Properties can be either one property as a string\n  // or an array or properties;\n  // either case me just want to deal with arrays\n\n\n  var query = {\n    action: 'wbgetentities',\n    ids: ids.join('|'),\n    format: format\n  };\n  if (redirects === false) query.redirects = 'no';\n\n  if (languages) {\n    languages = forceArray(languages).map(shortLang);\n    query.languages = languages.join('|');\n  }\n\n  if (props && props.length > 0) query.props = forceArray(props).join('|');\n  return buildUrl(query);\n};","map":null,"metadata":{},"sourceType":"script"}