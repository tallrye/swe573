{"ast":null,"code":"var buildUrl = require('../utils/build_url');\n\nvar _require = require('../utils/utils'),\n    isPlainObject = _require.isPlainObject;\n\nvar types = ['item', 'property', 'lexeme', 'form', 'sense'];\n\nmodule.exports = function (search, language, limit, format, uselang) {\n  // Using the variable 'offset' instead of 'continue' as the later is a reserved word\n  var type, offset; // polymorphism: arguments can be passed as an object keys\n\n  if (isPlainObject(search)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    var params = search;\n    search = params.search;\n    language = params.language;\n    limit = params.limit;\n    offset = params.continue;\n    format = params.format;\n    uselang = params.uselang;\n    type = params.type;\n  }\n\n  if (!(search && search.length > 0)) throw new Error(\"search can't be empty\");\n  language = language || 'en';\n  uselang = uselang || language;\n  limit = limit || '20';\n  format = format || 'json';\n  type = type || 'item';\n  if (!types.includes(type)) throw new Error(\"invalid type: \".concat(type));\n  return buildUrl({\n    action: 'wbsearchentities',\n    search: search,\n    language: language,\n    limit: limit,\n    continue: offset,\n    format: format,\n    uselang: uselang,\n    type: type\n  });\n};","map":null,"metadata":{},"sourceType":"script"}