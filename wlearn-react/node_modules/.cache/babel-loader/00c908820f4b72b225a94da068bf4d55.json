{"ast":null,"code":"module.exports = function (input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof input === 'string') input = JSON.parse(input);\n  var vars = input.head.vars;\n  var results = input.results.bindings;\n\n  if (vars.length === 1 && options.minimize === true) {\n    var varName = vars[0];\n    return results.map(function (result) {\n      return parseValue(result[varName]);\n    }) // filtering-out bnodes\n    .filter(function (result) {\n      return result != null;\n    });\n  }\n\n  var _identifyVars = identifyVars(vars),\n      richVars = _identifyVars.richVars,\n      standaloneVars = _identifyVars.standaloneVars;\n\n  return results.map(getSimplifiedResult(richVars, standaloneVars));\n};\n\nvar parseValue = function parseValue(valueObj) {\n  if (!valueObj) return;\n  var datatype = valueObj.datatype;\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '');\n  var parser = parsers[valueObj.type] || getDatatypesParsers(datatype);\n  return parser(valueObj);\n};\n\nvar parsers = {\n  uri: function uri(valueObj) {\n    return parseUri(valueObj.value);\n  },\n  // blank nodes will be filtered-out in order to get things simple\n  bnode: function bnode() {\n    return null;\n  }\n};\n\nvar numberParser = function numberParser(valueObj) {\n  return parseFloat(valueObj.value);\n};\n\nvar getDatatypesParsers = function getDatatypesParsers(datatype) {\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '');\n  return datatypesParsers[datatype] || passValue;\n};\n\nvar datatypesParsers = {\n  decimal: numberParser,\n  integer: numberParser,\n  float: numberParser,\n  double: numberParser,\n  boolean: function boolean(valueObj) {\n    return valueObj.value === 'true';\n  } // return the raw value if the datatype is missing\n\n};\n\nvar passValue = function passValue(valueObj) {\n  return valueObj.value;\n};\n\nvar parseUri = function parseUri(uri) {\n  if (uri.startsWith('http://www.wikidata.org/entity/statement/')) {\n    return convertStatementUriToGuid(uri);\n  }\n\n  return uri.replace('http://www.wikidata.org/entity/', '').replace('http://www.wikidata.org/prop/direct/', '');\n};\n\nvar convertStatementUriToGuid = function convertStatementUriToGuid(uri) {\n  uri = uri.replace('http://www.wikidata.org/entity/statement/', '');\n  var parts = uri.split('-');\n  return parts[0] + '$' + parts.slice(1).join('-');\n};\n\nvar identifyVars = function identifyVars(vars) {\n  var data = {\n    richVars: [],\n    standaloneVars: []\n  };\n  return vars.reduce(spreadVars(vars), data);\n};\n\nvar spreadVars = function spreadVars(vars) {\n  return function (data, varName) {\n    if (vars.some(isAssociatedVar(varName))) {\n      data.richVars.push(varName);\n      return data;\n    }\n\n    if (!associatedVarPattern.test(varName)) {\n      data.standaloneVars.push(varName);\n      return data;\n    }\n\n    var associatedVar = varName.replace(associatedVarPattern, '$1') // The pattern regex fails to capture AltLabel prefixes alone,\n    // due to the comflict with Label\n    .replace(/Alt$/, '');\n\n    if (!vars.includes(associatedVar)) {\n      data.standaloneVars.push(varName);\n    }\n\n    return data;\n  };\n};\n\nvar associatedVarPattern = /^(\\w+)(Label|Description|AltLabel)$/;\n\nvar isAssociatedVar = function isAssociatedVar(varNameA) {\n  return function (varNameB) {\n    if (\"\".concat(varNameA, \"Label\") === varNameB) return true;\n    if (\"\".concat(varNameA, \"Description\") === varNameB) return true;\n    if (\"\".concat(varNameA, \"AltLabel\") === varNameB) return true;\n    return false;\n  };\n};\n\nvar getSimplifiedResult = function getSimplifiedResult(richVars, standaloneVars) {\n  return function (result) {\n    var simplifiedResult = {};\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = richVars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var varName = _step.value;\n        var value = parseValue(result[varName]);\n\n        if (value != null) {\n          simplifiedResult[varName] = {\n            value: value\n          };\n          addAssociatedValue(result, varName, 'label', simplifiedResult[varName]);\n          addAssociatedValue(result, varName, 'description', simplifiedResult[varName]);\n          addAssociatedValue(result, varName, 'aliases', simplifiedResult[varName]);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = standaloneVars[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _varName = _step2.value;\n        simplifiedResult[_varName] = parseValue(result[_varName]);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return simplifiedResult;\n  };\n};\n\nvar addAssociatedValue = function addAssociatedValue(result, varName, associatedVarName, varData) {\n  var fullAssociatedVarName = varName + varNameSuffixMap[associatedVarName];\n  var fullAssociatedVarData = result[fullAssociatedVarName];\n\n  if (fullAssociatedVarData != null) {\n    varData[associatedVarName] = fullAssociatedVarData.value;\n  }\n};\n\nvar varNameSuffixMap = {\n  label: 'Label',\n  description: 'Description',\n  aliases: 'AltLabel'\n};","map":null,"metadata":{},"sourceType":"script"}