{"ast":null,"code":"import _slicedToArray from \"/Users/tallrye/React/swe573-quizorus-web-api/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from \"react\";\nimport { useTransition, animated } from \"react-spring\";\nimport ReachAlert from \"@reach/alert\";\nimport Alert from \"./Alert\";\nimport { useTimeout } from \"./useTimeout\";\n\nvar getStyle = function getStyle(position) {\n  var style = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  };\n\n  if (position.includes(\"right\")) {\n    style.alignItems = \"flex-end\";\n  } else if (position.includes(\"left\")) {\n    style.alignItems = \"flex-start\";\n  }\n\n  return style;\n};\n\nexport var Message = function Message(_ref) {\n  var id = _ref.id,\n      message = _ref.message,\n      position = _ref.position,\n      onRequestRemove = _ref.onRequestRemove,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 30000 : _ref$duration;\n  var container = React.useRef(null);\n\n  var _React$useState = React.useState(duration),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      timeout = _React$useState2[0],\n      setTimeout = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      localShow = _React$useState4[0],\n      setLocalShow = _React$useState4[1];\n\n  var isFromTop = position === \"top-left\" || position === \"top-right\" || position === \"top\";\n  useTimeout(close, timeout);\n  var animation = {\n    config: {\n      mass: 1,\n      tension: 185,\n      friction: 26\n    },\n    from: {\n      opacity: 1,\n      height: 0,\n      transform: \"translateY(\".concat(isFromTop ? \"-100%\" : 0, \") scale(1)\")\n    },\n    enter: function enter() {\n      return function (next) {\n        return next({\n          opacity: 1,\n          height: container.current.getBoundingClientRect().height,\n          transform: \"translateY(0) scale(1)\"\n        });\n      };\n    },\n    leave: {\n      opacity: 0,\n      height: 0,\n      transform: \"translateY(0 scale(0.9)\"\n    },\n    onRest: onRest\n  };\n  var transition = useTransition(localShow, null, animation);\n  var style = React.useMemo(function () {\n    return getStyle(position);\n  }, [position]);\n\n  function onMouseEnter() {\n    setTimeout(null);\n  }\n\n  function onMouseLeave() {\n    setTimeout(duration);\n  }\n\n  function onRest() {\n    if (!localShow) {\n      onRequestRemove();\n    }\n  }\n\n  function close() {\n    setLocalShow(false);\n  }\n\n  function renderMessage() {\n    if (typeof message === \"string\" || React.isValidElement(message)) {\n      return React.createElement(Alert, {\n        id: id,\n        title: message,\n        onClose: close\n      });\n    }\n\n    if (typeof message === \"function\") {\n      return message({\n        id: id,\n        onClose: close\n      });\n    }\n\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, transition.map(function (_ref2) {\n    var key = _ref2.key,\n        item = _ref2.item,\n        props = _ref2.props;\n    return item && React.createElement(animated.div, {\n      key: key,\n      className: \"Toaster__message\",\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      style: Object.assign({\n        opacity: props.opacity,\n        height: props.height\n      }, style)\n    }, React.createElement(animated.div, {\n      style: {\n        transform: props.transform,\n        pointerEvents: \"auto\"\n      },\n      ref: container,\n      className: \"Toaster__message-wrapper\"\n    }, React.createElement(ReachAlert, null, renderMessage())));\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}