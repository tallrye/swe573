{"ast":null,"code":"var buildUrl = require('../utils/build_url');\n\nvar _require = require('../utils/utils'),\n    isPlainObject = _require.isPlainObject,\n    forceArray = _require.forceArray,\n    shortLang = _require.shortLang;\n\nmodule.exports = function (titles, sites, languages, props, format, redirects) {\n  // polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(titles)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    var params = titles;\n    titles = params.titles;\n    sites = params.sites;\n    languages = params.languages;\n    props = params.props;\n    format = params.format;\n    redirects = params.redirects;\n  }\n\n  format = format || 'json'; // titles cant be let empty\n\n  if (!(titles && titles.length > 0)) throw new Error('no title provided'); // default to the English Wikipedia\n\n  if (!(sites && sites.length > 0)) sites = ['enwiki']; // Properties can be either one property as a string\n  // or an array or properties;\n  // either case me just want to deal with arrays\n\n  titles = forceArray(titles);\n  sites = forceArray(sites).map(parseSite);\n  props = forceArray(props);\n  var query = {\n    action: 'wbgetentities',\n    titles: titles.join('|'),\n    sites: sites.join('|'),\n    format: format // Normalizing only works if there is only one site and title\n\n  };\n\n  if (sites.length === 1 && titles.length === 1) {\n    query.normalize = true;\n  }\n\n  if (languages) {\n    languages = forceArray(languages).map(shortLang);\n    query.languages = languages.join('|');\n  }\n\n  if (props && props.length > 0) query.props = props.join('|');\n  if (redirects === false) query.redirects = 'no';\n  return buildUrl(query);\n}; // convert 2 letters language code to Wikipedia sitelinks code\n\n\nvar parseSite = function parseSite(site) {\n  return site.length === 2 ? \"\".concat(site, \"wiki\") : site;\n};","map":null,"metadata":{},"sourceType":"script"}